
LightSensorSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000046e  00000502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800116  00800116  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a20  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063c  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000480  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000343  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000258b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee e6       	ldi	r30, 0x6E	; 110
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 31       	cpi	r26, 0x16	; 22
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a6 e1       	ldi	r26, 0x16	; 22
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 31       	cpi	r26, 0x1E	; 30
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	37 d0       	rcall	.+110    	; 0xd6 <main>
  68:	00 c2       	rjmp	.+1024   	; 0x46a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <leds_init>:

void leds_init()
{
	/* PB1 - RED; PB2 - BLUE
	 * Set PB1&PB2 as Outputs */
	DDRB = (1 << PB1) | (1 << PB2);
  6c:	86 e0       	ldi	r24, 0x06	; 6
  6e:	84 b9       	out	0x04, r24	; 4
  70:	08 95       	ret

00000072 <leds_red_blink>:
}

void leds_red_blink(long duration_us)
{
  72:	0f 93       	push	r16
  74:	1f 93       	push	r17
	long counter;
	PORTB |= (1<<PB1);
  76:	29 9a       	sbi	0x05, 1	; 5
	for (counter=0; counter<duration_us; counter++)
  78:	16 16       	cp	r1, r22
  7a:	17 06       	cpc	r1, r23
  7c:	18 06       	cpc	r1, r24
  7e:	19 06       	cpc	r1, r25
  80:	6c f4       	brge	.+26     	; 0x9c <leds_red_blink+0x2a>
  82:	00 e0       	ldi	r16, 0x00	; 0
  84:	10 e0       	ldi	r17, 0x00	; 0
  86:	98 01       	movw	r18, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	00 00       	nop
  8a:	0f 5f       	subi	r16, 0xFF	; 255
  8c:	1f 4f       	sbci	r17, 0xFF	; 255
  8e:	2f 4f       	sbci	r18, 0xFF	; 255
  90:	3f 4f       	sbci	r19, 0xFF	; 255
  92:	06 17       	cp	r16, r22
  94:	17 07       	cpc	r17, r23
  96:	28 07       	cpc	r18, r24
  98:	39 07       	cpc	r19, r25
  9a:	b1 f7       	brne	.-20     	; 0x88 <leds_red_blink+0x16>
	{
		_delay_us(1);
	}
	
	PORTB &= ~(1<<PB1);
  9c:	29 98       	cbi	0x05, 1	; 5
}
  9e:	1f 91       	pop	r17
  a0:	0f 91       	pop	r16
  a2:	08 95       	ret

000000a4 <leds_blue_blink>:

void leds_blue_blink(long duration_us)
{
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
		long counter;
		PORTB |= (1<<PB2);
  a8:	2a 9a       	sbi	0x05, 2	; 5
		for (counter=0; counter<duration_us; counter++)
  aa:	16 16       	cp	r1, r22
  ac:	17 06       	cpc	r1, r23
  ae:	18 06       	cpc	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <leds_blue_blink+0x2a>
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	98 01       	movw	r18, r16
  ba:	00 00       	nop
  bc:	0f 5f       	subi	r16, 0xFF	; 255
  be:	1f 4f       	sbci	r17, 0xFF	; 255
  c0:	2f 4f       	sbci	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	06 17       	cp	r16, r22
  c6:	17 07       	cpc	r17, r23
  c8:	28 07       	cpc	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	b1 f7       	brne	.-20     	; 0xba <leds_blue_blink+0x16>
		{
			_delay_us(1);
		}
		
		PORTB &= ~(1<<PB2);
  ce:	2a 98       	cbi	0x05, 2	; 5
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	08 95       	ret

000000d6 <main>:
#include "leds.h"
#include "light_sensor.h"

int main(void)
{
	leds_init();
  d6:	ca df       	rcall	.-108    	; 0x6c <leds_init>
	light_sensor_init();
  d8:	11 d0       	rcall	.+34     	; 0xfc <light_sensor_init>

	/* Set DAY mode on startup */
	states_set_state(STATE_DAY_MODE);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	27 d0       	rcall	.+78     	; 0x12c <states_set_state>
	
	/* Test LEDS */
	leds_red_blink(LEDS_LONG_BLINK);
  de:	60 ea       	ldi	r22, 0xA0	; 160
  e0:	76 e8       	ldi	r23, 0x86	; 134
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	c5 df       	rcall	.-118    	; 0x72 <leds_red_blink>
	leds_blue_blink(LEDS_LONG_BLINK);
  e8:	60 ea       	ldi	r22, 0xA0	; 160
  ea:	76 e8       	ldi	r23, 0x86	; 134
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	d9 df       	rcall	.-78     	; 0xa4 <leds_blue_blink>

    while(1)
    {
		states_dispatch_event(EVENT_IDLE, NULL);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	4d d0       	rcall	.+154    	; 0x194 <states_dispatch_event>
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <main+0x1c>

000000fc <light_sensor_init>:
	/* Setup ADC 
	 * Light sensor (resistor) is connected to ADC3 */
	
	/* Voltage reference - AVcc
	 * Channel - ADC3  */
	ADMUX = (1 << REFS0) | (1<<MUX1) | (1<<MUX0);
  fc:	83 e4       	ldi	r24, 0x43	; 67
  fe:	80 93 7c 00 	sts	0x007C, r24
	
	/* Enable ADC */
	ADCSRA |= (1<<ADEN);
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <light_sensor_get_data>:
uint16_t light_sensor_get_data()
{
	uint16_t result;
	
	/* Start conversion */
	ADCSRA |= (1<<ADSC);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	
	/* Wait until its completion */
	while ((ADCSRA & (1<<ADSC)) != 0);
 118:	80 81       	ld	r24, Z
 11a:	86 fd       	sbrc	r24, 6
 11c:	fd cf       	rjmp	.-6      	; 0x118 <light_sensor_get_data+0xa>
	
	/* Read ADC value (ADCL MUST BE READ FIRST) */
	result = ADCL;
 11e:	80 91 78 00 	lds	r24, 0x0078
	result |= (ADCH<<8);
 122:	20 91 79 00 	lds	r18, 0x0079
 126:	90 e0       	ldi	r25, 0x00	; 0
	return result;
	
 128:	92 2b       	or	r25, r18
 12a:	08 95       	ret

0000012c <states_set_state>:
		state_day_exit,
		state_day_event_handler},		
};

void states_set_state(STATE_ID_T state_id)
{
 12c:	cf 93       	push	r28
 12e:	c8 2f       	mov	r28, r24
	/* Check if appropriate state ID exists */
	if ((state_id <= STATE_NO_STATE) || (state_id >= STATE_STATE_MAX))
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	8c 0f       	add	r24, r28
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	60 f5       	brcc	.+88     	; 0x190 <states_set_state+0x64>
		return;
	
	/* If it is the same state - no need to exit and then re-init */
	if (state_id != s_current_state)
 138:	a0 91 17 01 	lds	r26, 0x0117
 13c:	ca 17       	cp	r28, r26
 13e:	41 f1       	breq	.+80     	; 0x190 <states_set_state+0x64>
	{
		/* Check whether we have an active state. Tear it down if necessary */
		if (STATE_NO_STATE != s_current_state)
 140:	aa 23       	and	r26, r26
 142:	81 f0       	breq	.+32     	; 0x164 <states_set_state+0x38>
		{
			s_states[s_current_state].state_exit(&pCurrentStateBuf);
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	aa 0f       	add	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	aa 0f       	add	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	aa 0f       	add	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	aa 5f       	subi	r26, 0xFA	; 250
 154:	be 4f       	sbci	r27, 0xFE	; 254
 156:	14 96       	adiw	r26, 0x04	; 4
 158:	ed 91       	ld	r30, X+
 15a:	fc 91       	ld	r31, X
 15c:	15 97       	sbiw	r26, 0x05	; 5
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	09 95       	icall
		}
	
		/* Init the new state */
		s_past_state = s_current_state;
 164:	80 91 17 01 	lds	r24, 0x0117
 168:	80 93 16 01 	sts	0x0116, r24
		s_current_state = state_id;
 16c:	c0 93 17 01 	sts	0x0117, r28
		s_states[s_current_state].state_enter(&pCurrentStateBuf);
 170:	ec 2f       	mov	r30, r28
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ea 5f       	subi	r30, 0xFA	; 250
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	02 80       	ldd	r0, Z+2	; 0x02
 186:	f3 81       	ldd	r31, Z+3	; 0x03
 188:	e0 2d       	mov	r30, r0
 18a:	88 e1       	ldi	r24, 0x18	; 24
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	09 95       	icall
	}
}
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <states_dispatch_event>:
}

void states_dispatch_event(uint8_t event, void *data)
{
	/* Check if any state is set */
	if (s_current_state == STATE_NO_STATE) 
 194:	e0 91 17 01 	lds	r30, 0x0117
 198:	ee 23       	and	r30, r30
 19a:	81 f0       	breq	.+32     	; 0x1bc <states_dispatch_event+0x28>
		return;
	
	/* Dispatch event to current state */
	s_states[s_current_state].state_event_handler(event, &pCurrentStateBuf, data);
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	ea 5f       	subi	r30, 0xFA	; 250
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	06 80       	ldd	r0, Z+6	; 0x06
 1b0:	f7 81       	ldd	r31, Z+7	; 0x07
 1b2:	e0 2d       	mov	r30, r0
 1b4:	ab 01       	movw	r20, r22
 1b6:	68 e1       	ldi	r22, 0x18	; 24
 1b8:	71 e0       	ldi	r23, 0x01	; 1
 1ba:	09 95       	icall
 1bc:	08 95       	ret

000001be <state_day_enter>:
 * before switching to the night mode. This is to exclude 
 * ADC errors or impulses like flashlights, blinks, etc */
#define SWITCH_TO_NIGHT_MODE_CNT 8 

void state_day_enter(void **pStateBuf)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
	day_state_data *pData;
		
	*pStateBuf = malloc(sizeof(day_state_data));
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	29 d0       	rcall	.+82     	; 0x21c <malloc>
 1ca:	99 83       	std	Y+1, r25	; 0x01
 1cc:	88 83       	st	Y, r24
	pData = (day_state_data*) *pStateBuf;

	pData->light_history = 0;
 1ce:	fc 01       	movw	r30, r24
 1d0:	10 82       	st	Z, r1
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <state_day_exit>:

void state_day_exit(void **pStateBuf)
{
		if (NULL != *pStateBuf)
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	00 97       	sbiw	r24, 0x00	; 0
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <state_day_exit+0xc>
		{
			free(*pStateBuf);
 1e2:	b4 d0       	rcall	.+360    	; 0x34c <free>
 1e4:	08 95       	ret

000001e6 <state_day_event_handler>:

void state_day_event_handler(uint8_t event, void **pStateBuf, void *data)
{
	day_state_data *pData = (day_state_data*) *pStateBuf;
		
	switch (event)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	c1 f4       	brne	.+48     	; 0x21a <state_day_event_handler+0x34>
	{
		case EVENT_IDLE:
			/* Run ADC and wait for completion */
			if (light_sensor_get_data() < 800)
 1ea:	91 df       	rcall	.-222    	; 0x10e <light_sensor_get_data>
 1ec:	80 32       	cpi	r24, 0x20	; 32
 1ee:	93 40       	sbci	r25, 0x03	; 3
 1f0:	30 f4       	brcc	.+12     	; 0x1fe <state_day_event_handler+0x18>
			{
				leds_blue_blink(LEDS_LONG_BLINK);
 1f2:	60 ea       	ldi	r22, 0xA0	; 160
 1f4:	76 e8       	ldi	r23, 0x86	; 134
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	54 df       	rcall	.-344    	; 0xa4 <leds_blue_blink>
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <state_day_event_handler+0x22>
			}
			else
			{
				leds_red_blink(LEDS_LONG_BLINK);
 1fe:	60 ea       	ldi	r22, 0xA0	; 160
 200:	76 e8       	ldi	r23, 0x86	; 134
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	35 df       	rcall	.-406    	; 0x72 <leds_red_blink>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	9d e0       	ldi	r25, 0x0D	; 13
 20c:	23 e0       	ldi	r18, 0x03	; 3
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	20 40       	sbci	r18, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <state_day_event_handler+0x28>
 216:	00 c0       	rjmp	.+0      	; 0x218 <state_day_event_handler+0x32>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <malloc>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	91 05       	cpc	r25, r1
 224:	10 f4       	brcc	.+4      	; 0x22a <malloc+0xe>
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	e0 91 1c 01 	lds	r30, 0x011C
 22e:	f0 91 1d 01 	lds	r31, 0x011D
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	a0 e0       	ldi	r26, 0x00	; 0
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	30 97       	sbiw	r30, 0x00	; 0
 23c:	39 f1       	breq	.+78     	; 0x28c <malloc+0x70>
 23e:	40 81       	ld	r20, Z
 240:	51 81       	ldd	r21, Z+1	; 0x01
 242:	48 17       	cp	r20, r24
 244:	59 07       	cpc	r21, r25
 246:	b8 f0       	brcs	.+46     	; 0x276 <malloc+0x5a>
 248:	48 17       	cp	r20, r24
 24a:	59 07       	cpc	r21, r25
 24c:	71 f4       	brne	.+28     	; 0x26a <malloc+0x4e>
 24e:	82 81       	ldd	r24, Z+2	; 0x02
 250:	93 81       	ldd	r25, Z+3	; 0x03
 252:	10 97       	sbiw	r26, 0x00	; 0
 254:	29 f0       	breq	.+10     	; 0x260 <malloc+0x44>
 256:	13 96       	adiw	r26, 0x03	; 3
 258:	9c 93       	st	X, r25
 25a:	8e 93       	st	-X, r24
 25c:	12 97       	sbiw	r26, 0x02	; 2
 25e:	2c c0       	rjmp	.+88     	; 0x2b8 <malloc+0x9c>
 260:	90 93 1d 01 	sts	0x011D, r25
 264:	80 93 1c 01 	sts	0x011C, r24
 268:	27 c0       	rjmp	.+78     	; 0x2b8 <malloc+0x9c>
 26a:	21 15       	cp	r18, r1
 26c:	31 05       	cpc	r19, r1
 26e:	31 f0       	breq	.+12     	; 0x27c <malloc+0x60>
 270:	42 17       	cp	r20, r18
 272:	53 07       	cpc	r21, r19
 274:	18 f0       	brcs	.+6      	; 0x27c <malloc+0x60>
 276:	a9 01       	movw	r20, r18
 278:	db 01       	movw	r26, r22
 27a:	01 c0       	rjmp	.+2      	; 0x27e <malloc+0x62>
 27c:	ef 01       	movw	r28, r30
 27e:	9a 01       	movw	r18, r20
 280:	bd 01       	movw	r22, r26
 282:	df 01       	movw	r26, r30
 284:	02 80       	ldd	r0, Z+2	; 0x02
 286:	f3 81       	ldd	r31, Z+3	; 0x03
 288:	e0 2d       	mov	r30, r0
 28a:	d7 cf       	rjmp	.-82     	; 0x23a <malloc+0x1e>
 28c:	21 15       	cp	r18, r1
 28e:	31 05       	cpc	r19, r1
 290:	f9 f0       	breq	.+62     	; 0x2d0 <malloc+0xb4>
 292:	28 1b       	sub	r18, r24
 294:	39 0b       	sbc	r19, r25
 296:	24 30       	cpi	r18, 0x04	; 4
 298:	31 05       	cpc	r19, r1
 29a:	80 f4       	brcc	.+32     	; 0x2bc <malloc+0xa0>
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	9b 81       	ldd	r25, Y+3	; 0x03
 2a0:	61 15       	cp	r22, r1
 2a2:	71 05       	cpc	r23, r1
 2a4:	21 f0       	breq	.+8      	; 0x2ae <malloc+0x92>
 2a6:	fb 01       	movw	r30, r22
 2a8:	93 83       	std	Z+3, r25	; 0x03
 2aa:	82 83       	std	Z+2, r24	; 0x02
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <malloc+0x9a>
 2ae:	90 93 1d 01 	sts	0x011D, r25
 2b2:	80 93 1c 01 	sts	0x011C, r24
 2b6:	fe 01       	movw	r30, r28
 2b8:	32 96       	adiw	r30, 0x02	; 2
 2ba:	44 c0       	rjmp	.+136    	; 0x344 <__stack+0x45>
 2bc:	fe 01       	movw	r30, r28
 2be:	e2 0f       	add	r30, r18
 2c0:	f3 1f       	adc	r31, r19
 2c2:	81 93       	st	Z+, r24
 2c4:	91 93       	st	Z+, r25
 2c6:	22 50       	subi	r18, 0x02	; 2
 2c8:	31 09       	sbc	r19, r1
 2ca:	39 83       	std	Y+1, r19	; 0x01
 2cc:	28 83       	st	Y, r18
 2ce:	3a c0       	rjmp	.+116    	; 0x344 <__stack+0x45>
 2d0:	20 91 1a 01 	lds	r18, 0x011A
 2d4:	30 91 1b 01 	lds	r19, 0x011B
 2d8:	23 2b       	or	r18, r19
 2da:	41 f4       	brne	.+16     	; 0x2ec <malloc+0xd0>
 2dc:	20 91 02 01 	lds	r18, 0x0102
 2e0:	30 91 03 01 	lds	r19, 0x0103
 2e4:	30 93 1b 01 	sts	0x011B, r19
 2e8:	20 93 1a 01 	sts	0x011A, r18
 2ec:	20 91 00 01 	lds	r18, 0x0100
 2f0:	30 91 01 01 	lds	r19, 0x0101
 2f4:	21 15       	cp	r18, r1
 2f6:	31 05       	cpc	r19, r1
 2f8:	41 f4       	brne	.+16     	; 0x30a <__stack+0xb>
 2fa:	2d b7       	in	r18, 0x3d	; 61
 2fc:	3e b7       	in	r19, 0x3e	; 62
 2fe:	40 91 04 01 	lds	r20, 0x0104
 302:	50 91 05 01 	lds	r21, 0x0105
 306:	24 1b       	sub	r18, r20
 308:	35 0b       	sbc	r19, r21
 30a:	e0 91 1a 01 	lds	r30, 0x011A
 30e:	f0 91 1b 01 	lds	r31, 0x011B
 312:	e2 17       	cp	r30, r18
 314:	f3 07       	cpc	r31, r19
 316:	a0 f4       	brcc	.+40     	; 0x340 <__stack+0x41>
 318:	2e 1b       	sub	r18, r30
 31a:	3f 0b       	sbc	r19, r31
 31c:	28 17       	cp	r18, r24
 31e:	39 07       	cpc	r19, r25
 320:	78 f0       	brcs	.+30     	; 0x340 <__stack+0x41>
 322:	ac 01       	movw	r20, r24
 324:	4e 5f       	subi	r20, 0xFE	; 254
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	24 17       	cp	r18, r20
 32a:	35 07       	cpc	r19, r21
 32c:	48 f0       	brcs	.+18     	; 0x340 <__stack+0x41>
 32e:	4e 0f       	add	r20, r30
 330:	5f 1f       	adc	r21, r31
 332:	50 93 1b 01 	sts	0x011B, r21
 336:	40 93 1a 01 	sts	0x011A, r20
 33a:	81 93       	st	Z+, r24
 33c:	91 93       	st	Z+, r25
 33e:	02 c0       	rjmp	.+4      	; 0x344 <__stack+0x45>
 340:	e0 e0       	ldi	r30, 0x00	; 0
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	cf 01       	movw	r24, r30
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <free>:
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	09 f4       	brne	.+2      	; 0x356 <free+0xa>
 354:	87 c0       	rjmp	.+270    	; 0x464 <free+0x118>
 356:	fc 01       	movw	r30, r24
 358:	32 97       	sbiw	r30, 0x02	; 2
 35a:	13 82       	std	Z+3, r1	; 0x03
 35c:	12 82       	std	Z+2, r1	; 0x02
 35e:	c0 91 1c 01 	lds	r28, 0x011C
 362:	d0 91 1d 01 	lds	r29, 0x011D
 366:	20 97       	sbiw	r28, 0x00	; 0
 368:	81 f4       	brne	.+32     	; 0x38a <free+0x3e>
 36a:	20 81       	ld	r18, Z
 36c:	31 81       	ldd	r19, Z+1	; 0x01
 36e:	28 0f       	add	r18, r24
 370:	39 1f       	adc	r19, r25
 372:	80 91 1a 01 	lds	r24, 0x011A
 376:	90 91 1b 01 	lds	r25, 0x011B
 37a:	82 17       	cp	r24, r18
 37c:	93 07       	cpc	r25, r19
 37e:	79 f5       	brne	.+94     	; 0x3de <free+0x92>
 380:	f0 93 1b 01 	sts	0x011B, r31
 384:	e0 93 1a 01 	sts	0x011A, r30
 388:	6d c0       	rjmp	.+218    	; 0x464 <free+0x118>
 38a:	de 01       	movw	r26, r28
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	ae 17       	cp	r26, r30
 392:	bf 07       	cpc	r27, r31
 394:	50 f4       	brcc	.+20     	; 0x3aa <free+0x5e>
 396:	12 96       	adiw	r26, 0x02	; 2
 398:	4d 91       	ld	r20, X+
 39a:	5c 91       	ld	r21, X
 39c:	13 97       	sbiw	r26, 0x03	; 3
 39e:	9d 01       	movw	r18, r26
 3a0:	41 15       	cp	r20, r1
 3a2:	51 05       	cpc	r21, r1
 3a4:	09 f1       	breq	.+66     	; 0x3e8 <free+0x9c>
 3a6:	da 01       	movw	r26, r20
 3a8:	f3 cf       	rjmp	.-26     	; 0x390 <free+0x44>
 3aa:	b3 83       	std	Z+3, r27	; 0x03
 3ac:	a2 83       	std	Z+2, r26	; 0x02
 3ae:	40 81       	ld	r20, Z
 3b0:	51 81       	ldd	r21, Z+1	; 0x01
 3b2:	84 0f       	add	r24, r20
 3b4:	95 1f       	adc	r25, r21
 3b6:	8a 17       	cp	r24, r26
 3b8:	9b 07       	cpc	r25, r27
 3ba:	71 f4       	brne	.+28     	; 0x3d8 <free+0x8c>
 3bc:	8d 91       	ld	r24, X+
 3be:	9c 91       	ld	r25, X
 3c0:	11 97       	sbiw	r26, 0x01	; 1
 3c2:	84 0f       	add	r24, r20
 3c4:	95 1f       	adc	r25, r21
 3c6:	02 96       	adiw	r24, 0x02	; 2
 3c8:	91 83       	std	Z+1, r25	; 0x01
 3ca:	80 83       	st	Z, r24
 3cc:	12 96       	adiw	r26, 0x02	; 2
 3ce:	8d 91       	ld	r24, X+
 3d0:	9c 91       	ld	r25, X
 3d2:	13 97       	sbiw	r26, 0x03	; 3
 3d4:	93 83       	std	Z+3, r25	; 0x03
 3d6:	82 83       	std	Z+2, r24	; 0x02
 3d8:	21 15       	cp	r18, r1
 3da:	31 05       	cpc	r19, r1
 3dc:	29 f4       	brne	.+10     	; 0x3e8 <free+0x9c>
 3de:	f0 93 1d 01 	sts	0x011D, r31
 3e2:	e0 93 1c 01 	sts	0x011C, r30
 3e6:	3e c0       	rjmp	.+124    	; 0x464 <free+0x118>
 3e8:	d9 01       	movw	r26, r18
 3ea:	13 96       	adiw	r26, 0x03	; 3
 3ec:	fc 93       	st	X, r31
 3ee:	ee 93       	st	-X, r30
 3f0:	12 97       	sbiw	r26, 0x02	; 2
 3f2:	4d 91       	ld	r20, X+
 3f4:	5d 91       	ld	r21, X+
 3f6:	a4 0f       	add	r26, r20
 3f8:	b5 1f       	adc	r27, r21
 3fa:	ea 17       	cp	r30, r26
 3fc:	fb 07       	cpc	r31, r27
 3fe:	79 f4       	brne	.+30     	; 0x41e <free+0xd2>
 400:	80 81       	ld	r24, Z
 402:	91 81       	ldd	r25, Z+1	; 0x01
 404:	84 0f       	add	r24, r20
 406:	95 1f       	adc	r25, r21
 408:	02 96       	adiw	r24, 0x02	; 2
 40a:	d9 01       	movw	r26, r18
 40c:	11 96       	adiw	r26, 0x01	; 1
 40e:	9c 93       	st	X, r25
 410:	8e 93       	st	-X, r24
 412:	82 81       	ldd	r24, Z+2	; 0x02
 414:	93 81       	ldd	r25, Z+3	; 0x03
 416:	13 96       	adiw	r26, 0x03	; 3
 418:	9c 93       	st	X, r25
 41a:	8e 93       	st	-X, r24
 41c:	12 97       	sbiw	r26, 0x02	; 2
 41e:	e0 e0       	ldi	r30, 0x00	; 0
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	19 f0       	breq	.+6      	; 0x430 <free+0xe4>
 42a:	fe 01       	movw	r30, r28
 42c:	ec 01       	movw	r28, r24
 42e:	f9 cf       	rjmp	.-14     	; 0x422 <free+0xd6>
 430:	ce 01       	movw	r24, r28
 432:	02 96       	adiw	r24, 0x02	; 2
 434:	28 81       	ld	r18, Y
 436:	39 81       	ldd	r19, Y+1	; 0x01
 438:	82 0f       	add	r24, r18
 43a:	93 1f       	adc	r25, r19
 43c:	20 91 1a 01 	lds	r18, 0x011A
 440:	30 91 1b 01 	lds	r19, 0x011B
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	69 f4       	brne	.+26     	; 0x464 <free+0x118>
 44a:	30 97       	sbiw	r30, 0x00	; 0
 44c:	29 f4       	brne	.+10     	; 0x458 <free+0x10c>
 44e:	10 92 1d 01 	sts	0x011D, r1
 452:	10 92 1c 01 	sts	0x011C, r1
 456:	02 c0       	rjmp	.+4      	; 0x45c <free+0x110>
 458:	13 82       	std	Z+3, r1	; 0x03
 45a:	12 82       	std	Z+2, r1	; 0x02
 45c:	d0 93 1b 01 	sts	0x011B, r29
 460:	c0 93 1a 01 	sts	0x011A, r28
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
